import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ListObjectsV2Request;
import com.amazonaws.services.s3.model.ListObjectsV2Result;
import com.amazonaws.services.s3.model.S3ObjectSummary;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class S3OffsetStore {

    private final AmazonS3 s3Client;
    private final String bucketName;
    private final String offsetsPrefix;

    // Cache to store offsets
    private final Map<String, Map<Integer, Long>> offsetCache = new HashMap<>();

    public S3OffsetStore(AmazonS3 s3Client, String bucketName, String offsetsPrefix) {
        this.s3Client = s3Client;
        this.bucketName = bucketName;
        this.offsetsPrefix = offsetsPrefix;
    }

    public void loadOffsets() {
        try {
            ListObjectsV2Request request = new ListObjectsV2Request()
                    .withBucketName(bucketName)
                    .withPrefix(offsetsPrefix);

            ListObjectsV2Result result;
            do {
                result = s3Client.listObjectsV2(request);
                List<S3ObjectSummary> objects = result.getObjectSummaries();

                for (S3ObjectSummary object : objects) {
                    String key = object.getKey(); // e.g., "offsets/topic1/0.json"
                    processObject(key);
                }
                // Continue listing if more pages exist
                request.setContinuationToken(result.getNextContinuationToken());
            } while (result.isTruncated());

        } catch (Exception e) {
            e.printStackTrace();
            // Add proper error handling or fallback logic here
        }
    }

    private void processObject(String key) {
        try {
            // Extract topic and partition from the key
            // Example key: offsets/cdna.identity.api.eobao.onboard/0.json
            String[] parts = key.split("/");
            if (parts.length >= 3) {
                String topic = parts[1]; // "cdna.identity.api.eobao.onboard"
                String partitionFile = parts[2]; // "0.json"
                int partition = Integer.parseInt(partitionFile.replace(".json", ""));

                // Read the offset from S3
                Long offset = readOffsetFromS3(key);

                offsetCache.computeIfAbsent(topic, t -> new HashMap<>())
                           .put(partition, offset);

                System.out.println("Loaded offset for topic " + topic + ", partition " + partition + ": " + offset);
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Handle malformed keys or conversion errors
        }
    }

    private Long readOffsetFromS3(String key) {
        try {
            return Long.parseLong(s3Client.getObjectAsString(bucketName, key).trim());
        } catch (Exception e) {
            e.printStackTrace();
            // Return null or handle error if file is unreadable
            return null;
        }
    }

    public Long getOffset(String topic, int partition) {
        return offsetCache.getOrDefault(topic, new HashMap<>()).get(partition);
    }
}
